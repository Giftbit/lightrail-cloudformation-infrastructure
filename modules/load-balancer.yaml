AWSTemplateFormatVersion: "2010-09-09"
Description: "Lightrail App Load Balancer"

Parameters:
  EnvironmentName:
    Type: String
    Description: The Name of the Environment
    AllowedValues:
      - Dev
      - Staging
      - Production
  VpcId:
    Type: String
    Description: The VPC ID to associated this Load Balancer with
    AllowedPattern: vpc-[0-9a-z]+
  SecurityGroups:
    Type: String
    Description: A list of Security Group IDs to use for the load Balancer
    AllowedPattern: sg-[0-9a-z]+(,sg-[0-9a-z])*
  SubnetIds:
    Type: String
    Description: A list of Subnet IDs attach the load balancer to
    AllowedPattern: subnet-[0-9a-z]+(,subnet-[0-9a-z]+)+
  BaseDomain:
    Type: String
    Description: The Base Domain Name that you want to use

Mappings:
  TargetHostedZoneIds:  # See Amazon Route 53 Hosted Zone ID at http://docs.amazonaws.cn/en_us/general/latest/gr/rande.html#elb_region
    us-west-2:
      ALB: Z1H1FL5HABSF5

Conditions:
  EnvIsDev: !Equals [!Ref EnvironmentName, Dev]

Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups: !Split [",", !Ref SecurityGroups]
      Subnets: !Split [",", !Ref SubnetIds]
      LoadBalancerAttributes:
        -
          Key: idle_timeout.timeout_seconds
          Value: 60
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref AlbCertificate
      DefaultActions:
        -
          Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
  AdditionalCertificates:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties:
      ListenerArn: !Ref Listener
      Certificates:
        - CertificateArn: !Ref DemoStoreCertificate

  AlbCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "alb.${BaseDomain}"
      DomainValidationOptions:
        -
          DomainName: !Sub "alb.${BaseDomain}"
          ValidationDomain: !Ref BaseDomain
  AlbZoneRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${BaseDomain}."
      Name: !Sub "alb.${BaseDomain}."
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !FindInMap [TargetHostedZoneIds, !Ref "AWS::Region", ALB]

  DemoStoreCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "demo.${BaseDomain}"
      DomainValidationOptions:
        -
          DomainName: !Sub "demo.${BaseDomain}"
          ValidationDomain: !Ref BaseDomain
  DemoStoreZoneRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${BaseDomain}."
      Name: !Sub "demo.${BaseDomain}."
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !FindInMap [TargetHostedZoneIds, !Ref "AWS::Region", ALB]

  # Batch Configuration
  BatchTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckPath: /v1/batch/healthCheck
      HealthyThresholdCount: !If [EnvIsDev, 3, 5]
      UnhealthyThresholdCount: 3
      HealthCheckIntervalSeconds: 30
      TargetGroupAttributes:
        -
          Key: deregistration_delay.timeout_seconds
          Value: !If [EnvIsDev, 15, 60]
      Tags:
        -
          Key: Service
          Value: Batch
  BatchListenerWildcard:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 11
      ListenerArn: !Ref Listener
      Actions:
        -
          Type: forward
          TargetGroupArn: !Ref BatchTargetGroup
      Conditions:
        -
          Field: path-pattern
          Values:
            - /v1/batch/*
        -
          Field: host-header
          Values:
            - !Sub "alb.${BaseDomain}"
  BatchListenerSlash:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 12
      ListenerArn: !Ref Listener
      Actions:
        -
          Type: forward
          TargetGroupArn: !Ref BatchTargetGroup
      Conditions:
        -
          Field: path-pattern
          Values:
            - /v1/batch/
        -
          Field: host-header
          Values:
            - !Sub "alb.${BaseDomain}"
  BatchListenerBare:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 13
      ListenerArn: !Ref Listener
      Actions:
        -
          Type: forward
          TargetGroupArn: !Ref BatchTargetGroup
      Conditions:
        -
          Field: path-pattern
          Values:
            - /v1/batch
        -
          Field: host-header
          Values:
            - !Sub "alb.${BaseDomain}"

  # Services Configuration
  ServicesTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckPath: /v1/healthCheck
      HealthyThresholdCount: !If [EnvIsDev, 3, 5]
      UnhealthyThresholdCount: 3
      HealthCheckIntervalSeconds: 30
      TargetGroupAttributes:
        -
          Key: deregistration_delay.timeout_seconds
          Value: !If [EnvIsDev, 15, 60]
        -
          Key: stickiness.enabled
          Value: true
        -
          Key: stickiness.type
          Value: lb_cookie
      Tags:
        -
          Key: Service
          Value: Services
  ServicesListenerWildcard:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 21
      ListenerArn: !Ref Listener
      Actions:
        -
          Type: forward
          TargetGroupArn: !Ref ServicesTargetGroup
      Conditions:
        -
          Field: path-pattern
          Values:
            - /v1/*
        -
          Field: host-header
          Values:
            - !Sub "alb.${BaseDomain}"
  ServicesListenerSlash:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 22
      ListenerArn: !Ref Listener
      Actions:
        -
          Type: forward
          TargetGroupArn: !Ref ServicesTargetGroup
      Conditions:
        -
          Field: path-pattern
          Values:
            - /v1/
        -
          Field: host-header
          Values:
            - !Sub "alb.${BaseDomain}"
  ServicesListenerBare:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 23
      ListenerArn: !Ref Listener
      Actions:
        -
          Type: forward
          TargetGroupArn: !Ref ServicesTargetGroup
      Conditions:
        -
          Field: path-pattern
          Values:
            - /v1
        -
          Field: host-header
          Values:
            - !Sub "alb.${BaseDomain}"

  # Demo Store Configuration
  DemoStoreTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckPath: /
      HealthyThresholdCount: !If [EnvIsDev, 3, 5]
      UnhealthyThresholdCount: 3
      HealthCheckIntervalSeconds: 15
      TargetType: ip
      TargetGroupAttributes:
        -
          Key: deregistration_delay.timeout_seconds
          Value: !If [EnvIsDev, 15, 60]
      Tags:
        -
          Key: Service
          Value: DemoStore
  DemoStoreListener:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 31
      ListenerArn: !Ref Listener
      Actions:
        -
          Type: forward
          TargetGroupArn: !Ref DemoStoreTargetGroup
      Conditions:
        -
          Field: host-header
          Values:
            - !Sub "demo.${BaseDomain}"

  EcsLoadBalancingServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ecs.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

Outputs:
  DNSName:
    Value: !Ref AlbZoneRecord
  ServicesTargetGroupArn:
    Value: !Ref ServicesTargetGroup
  BatchTargetGroupArn:
    Value: !Ref BatchTargetGroup
  DemoStoreTargetGroupArn:
    Value: !Ref DemoStoreTargetGroup
  EcsLoadBalancingServiceRoleArn:
    Value: !GetAtt EcsLoadBalancingServiceRole.Arn
