AWSTemplateFormatVersion: "2010-09-09"
Description: "Lightrail Subdomain Website"

Parameters:
  DomainName:
    Description: Domain name
    Type: String
  SubdomainName:
    Description: Subdomain name
    Type: String
    AllowedPattern: ^[^.]*$
  CertificateArn:
    Description: Arn of the AWS Certificate Manager cert for the CloudFront distribution (must be in us-east-1)
    Type: String
    AllowedPattern: ^arn:aws:acm:us-east-1:\d+:certificate/.*$
  GroupsToGrantBucketReadWrite:
    Type: String
    Description: The name of the groups to grant website read write access
    AllowedPattern: "([a-zA-Z0-9+=,.@_-]+(,[a-zA-Z0-9+=,.@_-]+)*)?"
  PriceClass:
    Type: String
    Description: CloudFront price class
    Default: PriceClass_100
    AllowedValues:
      - PriceClass_All
      - PriceClass_100
      - PriceClass_200

Conditions:
  ShouldConfigureReadWriteAccess: !Not [!Equals [!Ref GroupsToGrantBucketReadWrite, ""]]

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
      Tags:
        - Key: Service
          Value: !Ref SubdomainName
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub "arn:aws:s3:::${Bucket}/*"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
          - Effect: Allow
            Action:
              - s3:ListBucket  # without this all not-founds become 403
            Resource:
              - !Sub "arn:aws:s3:::${Bucket}"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
  BucketAccessPolicy:
    Type: AWS::IAM::Policy
    Condition: ShouldConfigureReadWriteAccess
    Properties:
      PolicyName: BucketReadWrite
      Groups: !Split [",", !Ref GroupsToGrantBucketReadWrite]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetBucket*
              - S3:GetObject*
              - s3:PutObject*
              - s3:DeleteObject*
              - s3:ListBucketMultipartUploads
            Resource:
              - !Sub "arn:aws:s3:::${Bucket}"
              - !Sub "arn:aws:s3:::${Bucket}/*"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub "${SubdomainName}.${DomainName}"
        Comment: !Sub "Managed with CloudFormation Stack ${AWS::StackName}"
        Enabled: true
        DefaultRootObject: index.html
        IPV6Enabled: true
        HttpVersion: http2
        PriceClass: !Ref PriceClass
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: /403.html
            ErrorCachingMinTTL: 60
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
            ErrorCachingMinTTL: 60
        Origins:
          - DomainName: !GetAtt Bucket.DomainName
            Id: DefaultEndpointOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        DefaultCacheBehavior:
          TargetOriginId: DefaultEndpointOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          MinTTL: 0
          MaxTTL: 300
          DefaultTTL: 60
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
      Tags:
        - Key: Service
          Value: !Ref SubdomainName

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "CloudFront OAI for ${SubdomainName}.${DomainName}"

  SubdomainRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${DomainName}."
      Name: !Sub "${SubdomainName}.${DomainName}."
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # This is the Route53 HostedZoneId for CloudFront. See http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
