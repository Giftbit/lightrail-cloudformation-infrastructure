AWSTemplateFormatVersion: "2010-09-09"
Description: Secures an S3 bucket with its KMS key

Parameters:
  EnvironmentName:
    Type: String
    Description: The Name of the Environment
    AllowedValues:
      - Dev
      - Staging
      - Production
  BucketName:
    Type: String
    Description: Name of the secure config bucket
    AllowedPattern: \S+
  EncryptionKeyArn:
    Type: String
    Description: ARN of the secure config encryption key
    AllowedPattern: arn:aws:kms:[a-z0-9-]+:\d{12}:key/[a-f0-9-]+
  UserIdsToGrantReadAccess:
    Type: String
    Description: >
      (Optional) Comma separated list of AWS UserIDs to grant Read Access
      (See http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_variables.html#policy-vars-infotouse)
    Default: ""
    AllowedPattern: (([A-Z0-9]+(:\*)?|\d{12})(,([A-Z0-9]+(:\*)?|\d{12}))*)?
  UserIdsToGrantWriteAccess:
    Type: String
    Description: >
      (Optional) Comma separated list of AWS UserIDs to grant Write Access
      (See http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_variables.html#policy-vars-infotouse)
    Default: ""
    AllowedPattern: (([A-Z0-9]+(:\*)?|\d{12})(,([A-Z0-9]+(:\*)?|\d{12}))*)?
  UserIdsToGrantReadWriteAccess:
    Type: String
    Description: >
      (Optional) Comma separated list of AWS UserIDs to grant Read Write Access
      (See http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_variables.html#policy-vars-infotouse)
    Default: ""
    AllowedPattern: (([A-Z0-9]+(:\*)?|\d{12})(,([A-Z0-9]+(:\*)?|\d{12}))*)?
  UserIdsToGrantPolicyAdminAccess:
    Type: String
    Description: >
      Comma separated list of AWS UserIDs to grant Policy Admin Access
      (See http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_variables.html#policy-vars-infotouse)
    AllowedPattern: ([A-Z0-9]+(:\*)?|\d{12})(,([A-Z0-9]+(:\*)?|\d{12}))*

Conditions:
  ShouldAllowInfrastructureAdminToPutConfiguration: !Equals [!Ref EnvironmentName, "Dev"]
  ShouldConfigureReadAccess: !Not [!Equals [!Ref UserIdsToGrantReadAccess, ""]]
  ShouldConfigureWriteAccess: !Not [!Equals [!Ref UserIdsToGrantWriteAccess, ""]]
  ShouldConfigureReadWriteAccess: !Not [!Equals [!Ref UserIdsToGrantReadWriteAccess, ""]]

Resources:
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketName
      PolicyDocument:
        Statement:
          -  # For Security and consistency, don't allow putting any object not using the encryption key
            Effect: Deny
            Action:
              - s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${BucketName}/*"
            Principal: "*"
            Condition:
              StringNotEquals:
                "s3:x-amz-server-side-encryption-aws-kms-key-id": !Ref EncryptionKeyArn
          -
            Effect: "Deny"
            NotAction:
              - s3:PutBucketPolicy
              - s3:GetBucketPolicy
              - s3:DeleteBucketPolicy
            Resource:
              - !Sub "arn:aws:s3:::${BucketName}"
              - !Sub "arn:aws:s3:::${BucketName}/*"
            Principal: "*"
            Condition:
              StringLike:
                aws:userid: !Split [",", !Ref UserIdsToGrantPolicyAdminAccess]
          - !If  # In Dev, InfrastructureAdmin can set values and update policies (to test them out before codepipeline)
            - ShouldAllowInfrastructureAdminToPutConfiguration
            -
              Effect: "Deny"
              NotAction:
                - s3:AbortMultipartUpload
                - s3:ListBucket
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:PutObjectVersionAcl
                - s3:PutObjectTagging
                - s3:GetBucketLocation
                - s3:GetBucketVersioning
                - s3:PutBucketPolicy
                - s3:GetBucketPolicy
                - s3:DeleteBucketPolicy
              Resource:
                - !Sub "arn:aws:s3:::${BucketName}"
                - !Sub "arn:aws:s3:::${BucketName}/*"
              Principal: "*"
              Condition:
                StringLike:
                  aws:userid: AROAINEQ7YDEFE7R3L24E:*
            - !Ref AWS::NoValue
          - !If  # Restrict Reading Roles to specifically Reading actions
            - ShouldConfigureReadAccess
            -
              Effect: "Deny"
              NotAction:
                - s3:ListBucket
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectVersionAcl
                - s3:GetObjectTagging
                - s3:GetBucketLocation
              Resource:
                - !Sub "arn:aws:s3:::${BucketName}"
                - !Sub "arn:aws:s3:::${BucketName}/*"
              Principal: "*"
              Condition:
                StringLike:
                  aws:userid: !Split [",", !Ref UserIdsToGrantReadAccess]
            - !Ref AWS::NoValue
          - !If  # Restrict Writing Roles to specifically Writing actions
            - ShouldConfigureWriteAccess
            -
              Effect: "Deny"
              NotAction:
                - s3:AbortMultipartUpload
                - s3:ListBucket
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:PutObjectVersionAcl
                - s3:PutObjectTagging
                - s3:GetBucketLocation
                - s3:GetBucketVersioning
              Resource:
                - !Sub "arn:aws:s3:::${BucketName}"
                - !Sub "arn:aws:s3:::${BucketName}/*"
              Principal: "*"
              Condition:
                StringLike:
                  aws:userid: !Split [",", !Ref UserIdsToGrantWriteAccess]
            - !Ref AWS::NoValue
          - !If  # Restrict Writing Roles to specifically Writing actions
            - ShouldConfigureReadWriteAccess
            -
              Effect: "Deny"
              NotAction:
                - s3:AbortMultipartUpload
                - s3:ListBucket
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectVersionAcl
                - s3:GetObjectTagging
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:PutObjectVersionAcl
                - s3:PutObjectTagging
                - s3:GetBucketLocation
                - s3:GetBucketVersioning
              Resource:
                - !Sub "arn:aws:s3:::${BucketName}"
                - !Sub "arn:aws:s3:::${BucketName}/*"
              Principal: "*"
              Condition:
                StringLike:
                  aws:userid: !Split [",", !Ref UserIdsToGrantReadWriteAccess]
            - !Ref AWS::NoValue
          -  # Deny all other accesses
            Effect: Deny
            NotAction:
              - s3:GetBucketLocation
              - s3:GetBucketTagging
            Resource:
              - !Sub "arn:aws:s3:::${BucketName}"
              - !Sub "arn:aws:s3:::${BucketName}/*"
            Principal: "*"
            Condition:
              StringNotLike:
                aws:userid: !Split  # This plus the Join below facilitate conditional list composition
                  - ","
                  - !Join
                    - ","
                    -
                      - !Ref AWS::AccountId
                      - !Ref UserIdsToGrantPolicyAdminAccess
                      - !If  # In Dev, Don't block the Infrastructure Admin Role
                        - ShouldAllowInfrastructureAdminToPutConfiguration
                        - AROAINEQ7YDEFE7R3L24E:*
                        - !Ref AWS::NoValue
                      - !If  # Don't block the Roles we specifically granted with the Restricted Reading roles above
                        - ShouldConfigureReadAccess
                        - !Ref UserIdsToGrantReadAccess  # This elements is comma separated, so joining it just works
                        - !Ref AWS::NoValue
                      - !If  # Don't block the Roles we specifically granted with the Restricted Writing roles above
                        - ShouldConfigureWriteAccess
                        - !Ref UserIdsToGrantWriteAccess  # This elements is comma separated, so joining it just works
                        - !Ref AWS::NoValue
                      - !If  # Don't block the Roles we specifically granted with the Restricted Read/Write roles above
                        - ShouldConfigureReadWriteAccess
                        - !Ref UserIdsToGrantReadWriteAccess  # This elements is comma separated, so joining it just works
                        - !Ref AWS::NoValue
