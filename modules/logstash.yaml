AWSTemplateFormatVersion: "2010-09-09"
Description: "Lightrail Logstash"

Parameters:
  EnvironmentName:
    Type: String
    Description: The Name of the Environment
    AllowedValues:
      - Dev
      - Staging
      - Production
  AccountsToGrantKibanaFullAccess:
    Type: String
    Description: Comma separated list of AWS Account IDs to grant Read Access
    Default: ""
    AllowedPattern: ((^|,)\d{12})*
  AccountsToGrantEcrReadAccess:
    Type: String
    Description: Comma separated list of AWS Account IDs to grant ECR Read Access
    Default: ""
    AllowedPattern: ((^|,)\d{12})*
  GroupsToGrantDeployAccess:
    Type: String
    Description: A Comma Separated List of Groups to grant ability to deploy this service
    AllowedPattern: ((^|,)[a-zA-Z0-9+=.@_-]+)*
  NonEmergencyAlertsSnsArn:
    Type: String
    Description: The ARN for the SNS Topic to notify on Non Emergency Events
    AllowedPattern: arn:aws:sns:[a-z0-9-]+:\d{12}:[a-zA-Z0-9_-]+

Mappings:
  Dev:
    us-west-2:
      EcrRepoOverride: ""  # Intentionally left blank, required but should not be used
      EcrRepoArnOverride: ""  # Intentionally left blank, required but should not be used
      KibanaDomainOverride: ""
      KibanaArnOverride: ""
  Staging:
    us-west-2:
      EcrRepoOverride: "757264843183.dkr.ecr.us-west-2.amazonaws.com/dev-l-ecrre-l6wmgq7alz3p"
      EcrRepoArnOverride: "arn:aws:ecr:us-west-2:757264843183:repository/dev-l-ecrre-l6wmgq7alz3p"
      KibanaDomainOverride: "search-dev-kibana-sjowd4vallqppkmg3vtlhcvij4.us-west-2.es.amazonaws.com"
      KibanaArnOverride: "arn:aws:es:us-west-2:757264843183:domain/dev-kibana"
  Production:
    us-west-2:
      EcrRepoOverride: ""
      EcrRepoArnOverride: ""
      KibanaDomainOverride: ""
      KibanaArnOverride: ""

  EnvNames:
    Lowercase:
      Dev: dev
      Staging: staging
      Production: production

Conditions:
  ShouldCreateECRRepository: !Equals [!Ref EnvironmentName, Dev]
  ShouldUseEcrRepoOverride: !Not [!Equals [!Ref EnvironmentName, Dev]]
  ShouldConfigureECRAccess: !Not [!Equals [!Ref AccountsToGrantEcrReadAccess, ""]]
  ShouldConfigureKibanaFullAccess: !Not [!Equals [!Ref AccountsToGrantKibanaFullAccess, ""]]
  ShouldConfigureDeployAccess: !Not [!Equals [!Ref GroupsToGrantDeployAccess, ""]]
  ShouldCreateKibanaInstance: !Not [!Equals [!Ref EnvironmentName, Staging]]

Resources:
  Kibana:
    Type: AWS::Elasticsearch::Domain
    Condition: ShouldCreateKibanaInstance
    Properties:
      # DomainName must be less than 28 Characters and match [a-z][a-z0-9\-]+
      DomainName: !Sub
        - "${EnvironmentNameLowercase}-kibana"
        - EnvironmentNameLowercase: !FindInMap [EnvNames, Lowercase, !Ref EnvironmentName]
      ElasticsearchClusterConfig:
        InstanceCount: 1
        InstanceType: m3.medium.elasticsearch
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 100
        VolumeType: gp2
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              AWS: "*"
            Action: es:*
            Resource: !Sub
              - "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${EnvironmentNameLowercase}-kibana/*"
              - EnvironmentNameLowercase: !FindInMap [EnvNames, Lowercase, !Ref EnvironmentName]
            Condition:
              IpAddress:
                aws:SourceIp:
                  - "184.69.186.114"
          - !If
            - ShouldConfigureKibanaFullAccess
            -
              Effect: Allow
              Action:
                - es:*
              Principal:
                AWS: !Split [",", !Ref AccountsToGrantKibanaFullAccess]
              Resource:
                - !Sub
                  - "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${EnvironmentNameLowercase}-kibana/*"
                  - EnvironmentNameLowercase: !FindInMap [EnvNames, Lowercase, !Ref EnvironmentName]
            - !Ref AWS::NoValue

  # Logstash ECR Repository
  EcrRepo:
    Type: AWS::ECR::Repository
    Condition: ShouldCreateECRRepository
    Properties:
      RepositoryPolicyText: !If
        - ShouldConfigureECRAccess
        -
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: !Split [",", !Ref AccountsToGrantEcrReadAccess]
              Action:
                - ecr:GetDownloadUrlForLayer
                - ecr:BatchGetImage
                - ecr:BatchCheckLayerAvailability
                - ecr:DescribeRepositories
                - ecr:ListImages
        - !Ref AWS::NoValue
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Policies:
        -
          PolicyName: KibanaAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - es:ESHttpGet
                  - es:ESHttpHead
                  - es:ESHttpPost
                  - es:ESHttpPut
                Resource: !If
                  - ShouldCreateKibanaInstance
                  -
                    - !Sub "${Kibana.DomainArn}"
                    - !Sub "${Kibana.DomainArn}/*"
                  -
                    - !FindInMap [!Ref EnvironmentName, !Ref "AWS::Region", KibanaArnOverride]
                    - !Sub
                      - "${KibanaDomainArn}/*"
                      - KibanaDomainArn: !FindInMap [!Ref EnvironmentName, !Ref "AWS::Region", KibanaArnOverride]

  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              AWS:
                - !Ref "AWS::AccountId"  # Allow this role to be assumed from the Current Account with MFA
            Condition:
              Bool:
                "aws:MultiFactorAuthPresent": true
      Policies:
        -
          PolicyName: CloudFormationUpdateAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeChangeSet
                Resource:
                  - !Sub
                    - "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${EnvNameLowercase}-Logstash/*"
                    -
                      EnvNameLowercase: !FindInMap [EnvNames, Lowercase, !Ref EnvironmentName]
              -
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                Resource:
                  - !If
                    - ShouldUseEcrRepoOverride
                    - !FindInMap [!Ref EnvironmentName, !Ref "AWS::Region", EcrRepoArnOverride]
                    - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrRepo}"
              -
                Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - cloudformation:DescribeStackResource
                Resource:
                  - !Sub
                    - "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${EnvNameLowercase}/*"
                    -
                      EnvNameLowercase: !FindInMap [EnvNames, Lowercase, !Ref EnvironmentName]
              -
                Effect: Allow
                Action:
                  - ecs:RegisterTaskDefinition
                  - ecs:DeregisterTaskDefinition
                  - ecs:Describe*
                  - ecs:CreateService
                  - ecs:UpdateService
                  - ecs:DeleteService
                Resource: "*"

  DeploymentAccessPolicy:
    Type: AWS::IAM::Policy
    Condition: ShouldConfigureDeployAccess
    Properties:
      Groups: !Split [",", !Ref GroupsToGrantDeployAccess]
      PolicyName: ServicesDeployAccess
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - !GetAtt DeploymentRole.Arn

  LogGroup:
    Type: AWS::Logs::LogGroup
  MetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroup
      FilterPattern: ""
      MetricTransformations:
        -
          MetricName: LogCount
          MetricNamespace: !Sub "Lightrail/${EnvironmentName}"
          MetricValue: 1
  LogAlarm:
    # If the logstash service is firing a lot of logs for itself, then something is going wrong
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      MetricName: LogCount
      Namespace: !Sub "Lightrail/${EnvironmentName}"
      Period: 120
      Statistic: Sum
      Threshold: 5
      AlarmActions:
        - !Ref NonEmergencyAlertsSnsArn
      OKActions:
        - !Ref NonEmergencyAlertsSnsArn
      AlarmDescription: !Sub >
        The ${EnvironmentName} Logstash agent is creating an irregularly high number of logs. This usually indicates
        that it is in an error state.

Outputs:
  KibanaDomain:
    Description: The Domain Endpoint for the Kibana Domain
    Value: !If
      - ShouldCreateECRRepository
      - !GetAtt Kibana.DomainEndpoint
      - !FindInMap [!Ref EnvironmentName, !Ref "AWS::Region", KibanaDomainOverride]
  KibanaArn:
    Description: The Domain ARN for the Kibana Domain
    Value: !If
      - ShouldCreateECRRepository
      - !GetAtt Kibana.DomainArn
      - !FindInMap [!Ref EnvironmentName, !Ref "AWS::Region", KibanaArnOverride]
  TaskRoleArn:
    Description: The ARN of the Tasks IAM Role
    Value: !GetAtt Role.Arn
  EcrRepo:
    Description: The Codebuild accessible docker image reference
    Value: !If
      - ShouldCreateECRRepository
      - !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepo}"
      - !FindInMap [!Ref EnvironmentName, !Ref "AWS::Region", EcrRepoOverride]
  EcrRepoArn:
    Description: The Codebuild accessible docker image reference
    Value: !If
      - ShouldCreateECRRepository
      - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrRepo}"
      - !FindInMap [!Ref EnvironmentName, !Ref "AWS::Region", EcrRepoArnOverride]
  DeploymentRoleArn:
    Description: The Arn of the Deployment Role
    Value: !GetAtt DeploymentRole.Arn
  LogGroupName:
    Description: The Name of the Log Group for Logstash
    Value: !Ref LogGroup
